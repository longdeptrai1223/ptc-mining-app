import { createContext, useContext, useEffect, useState } from "react";
import { useLocation } from "wouter";
import { 
  User, 
  signInWithRedirect, 
  signInWithPopup,
  getRedirectResult,
  signOut,
  onAuthStateChanged,
} from "firebase/auth";
import { auth, googleProvider, db } from "@/lib/firebase";
import { doc, getDoc, setDoc, serverTimestamp } from "firebase/firestore";
import { nanoid } from "nanoid";

interface AuthContextType {
  user: User | null;
  loading: boolean;
  signInWithGoogle: () => Promise<void>;
  logout: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [, navigate] = useLocation();

  useEffect(() => {
    console.log("=== KH·ªûI T·∫†O AUTH PROVIDER v3.0 ===");
    
    // Ph√°t hi·ªán m√¥i tr∆∞·ªùng ƒë·∫∑c bi·ªát
    const isAndroid = /Android/i.test(navigator.userAgent);
    const isWebView = /wv|WebView|PTCWV/.test(navigator.userAgent);
    const isAndroidWebView = isAndroid && isWebView;
    
    // Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t chuy·ªÉn h∆∞·ªõng
    let redirectTriggered = false;
    const wasRedirectTriggered = localStorage.getItem("auth_redirect_triggered") === "true";
    const wasAuthCompleted = localStorage.getItem("auth_completed") === "true";
    const isWebViewMode = localStorage.getItem("auth_webview_mode") === "true";
    
    console.log("üß™ Tr·∫°ng th√°i auth cookies:", {
      authRedirectTriggered: wasRedirectTriggered,
      authCompleted: wasAuthCompleted,
      webViewMode: isWebViewMode,
      android: isAndroid,
      webView: isWebView
    });
    
    // L∆ØU √ù ƒê·∫∂C BI·ªÜT: Ph√°t hi·ªán l·ªói v√≤ng l·∫∑p chuy·ªÉn h∆∞·ªõng
    const lastHandleTime = parseInt(localStorage.getItem("auth_last_handle_time") || "0");
    const currentTime = Date.now();
    const timeSinceLastHandle = currentTime - lastHandleTime;
    
    // N·∫øu x·ª≠ l√Ω qu√° nhanh (d∆∞·ªõi 2 gi√¢y), c√≥ th·ªÉ ƒëang trong v√≤ng l·∫∑p
    if (lastHandleTime > 0 && timeSinceLastHandle < 2000) {
      console.error("‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è PH√ÅT HI·ªÜN V√íNG L·∫∂P X·ª¨ L√ù! Th·ªùi gian t·ª´ l·∫ßn x·ª≠ l√Ω tr∆∞·ªõc:", timeSinceLastHandle + "ms");
      // X√≥a tr·∫°ng th√°i ƒë·ªÉ tho√°t v√≤ng l·∫∑p
      localStorage.removeItem("auth_redirect_triggered");
      localStorage.removeItem("auth_webview_mode");
      localStorage.setItem("auth_loop_detected", "true");
    }
    
    // C·∫≠p nh·∫≠t th·ªùi gian x·ª≠ l√Ω
    localStorage.setItem("auth_last_handle_time", currentTime.toString());
    
    // X·ª≠ l√Ω k·∫øt qu·∫£ redirect sau khi ƒëƒÉng nh·∫≠p
    const handleRedirectResult = async () => {
      try {
        console.log("üìã KI·ªÇM TRA K·∫æT QU·∫¢ ƒêƒÇNG NH·∫¨P v3.0");
        console.log("- Redirect triggered:", wasRedirectTriggered);
        console.log("- Auth completed:", wasAuthCompleted);
        console.log("- WebView mode:", isWebViewMode);
        console.log("- Current path:", window.location.pathname);
        
        // X·ª¨ L√ù TH·ª¶ C√îNG CHO WEBVIEW: N·∫øu ƒë√£ ƒë√°nh d·∫•u trong localStorage
        if (isWebViewMode && isAndroidWebView) {
          console.log("ü§ñ X·ª¨ L√ù ƒê·∫∂C BI·ªÜT CHO WEBVIEW ANDROID");
          
          // L·∫•y token t·ª´ tham s·ªë URL (n·∫øu c√≥)
          const urlParams = new URLSearchParams(window.location.search);
          const authToken = urlParams.get('auth_token');
          
          if (authToken) {
            console.log("üîë Ph√°t hi·ªán auth token trong URL:", authToken);
            
            // X√≥a mode WebView ƒë·ªÉ tr√°nh x·ª≠ l√Ω l·∫°i
            localStorage.removeItem("auth_webview_mode");
            localStorage.setItem("auth_token_found", authToken);
            
            // X·ª≠ l√Ω ng∆∞·ªùi d√πng t·ª´ token n·∫øu c·∫ßn
            // ...
          }
          
          // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω ƒë·∫∑c bi·ªát
          localStorage.setItem("auth_webview_processed", "true");
        }
        
        // N·∫øu ƒë√£ ho√†n th√†nh x√°c th·ª±c trong qu√° kh·ª© (t·ª´ localStorage)
        if (wasAuthCompleted) {
          console.log("‚úÖ Ph√°t hi·ªán ƒëƒÉng nh·∫≠p th√†nh c√¥ng t·ª´ d·ªØ li·ªáu ƒë√£ l∆∞u");
          localStorage.removeItem("auth_completed");
          
          // N·∫øu ƒëang ·ªü trang login, chuy·ªÉn ƒë·∫øn dashboard
          if (window.location.pathname === "/") {
            redirectTriggered = true;
            console.log("üîÑ Chuy·ªÉn h∆∞·ªõng t·ª´ trang login ƒë·∫øn dashboard");
            navigate("/dashboard");
            return;
          }
        }
        
        // X·ª≠ l√Ω k·∫øt qu·∫£ redirect
        if (wasRedirectTriggered) {
          console.log("üì± ƒêang x·ª≠ l√Ω k·∫øt qu·∫£ sau redirect...");
          
          // ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω redirect ƒë·ªÉ tr√°nh v√≤ng l·∫∑p
          localStorage.removeItem("auth_redirect_triggered");
          
          // QUAN TR·ªåNG: Timeout ƒë·ªÉ ƒë·∫£m b·∫£o Firebase Auth c√≥ th·ªùi gian x·ª≠ l√Ω
          setTimeout(async () => {
            try {
              console.log("‚è±Ô∏è B·∫Øt ƒë·∫ßu l·∫•y k·∫øt qu·∫£ redirect sau timeout");
              const result = await getRedirectResult(auth);
              
              if (result && result.user) {
                console.log("‚úÖ ƒêƒÉng nh·∫≠p redirect th√†nh c√¥ng:", result.user.displayName);
                
                // L∆∞u th√¥ng tin ƒë·ªÉ tr√°nh m·∫•t khi refresh
                localStorage.setItem("auth_user_email", result.user.email || "");
                localStorage.setItem("auth_user_name", result.user.displayName || "");
                localStorage.setItem("auth_user_uid", result.user.uid);
                localStorage.setItem("auth_completed", "true");
                localStorage.setItem("auth_success_time", Date.now().toString());
                
                if (!redirectTriggered) {
                  redirectTriggered = true;
                  console.log("üîÑ Chuy·ªÉn h∆∞·ªõng ƒë·∫øn dashboard sau khi redirect th√†nh c√¥ng");
                  navigate("/dashboard");
                }
              } else {
                console.log("‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ redirect");
                // Ki·ªÉm tra l·ªói ƒëƒÉng nh·∫≠p
                const errorMsg = localStorage.getItem("auth_webview_error") || 
                                localStorage.getItem("auth_popup_error") ||
                                localStorage.getItem("auth_critical_error");
                                
                if (errorMsg) {
                  console.error("üîç T√¨m th·∫•y l·ªói ƒë√£ ghi trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p:", errorMsg);
                }
              }
            } catch (error: any) {
              console.error("‚ùå L·ªói khi l·∫•y k·∫øt qu·∫£ redirect:", error);
              
              // Ghi l·∫°i l·ªói ƒë·ªÉ ph√¢n t√≠ch
              localStorage.setItem("auth_redirect_result_error", JSON.stringify({
                time: Date.now(),
                message: error?.message || "Unknown error",
                code: error?.code || 'unknown'
              }));
            }
          }, 1000); // ƒê·ª£i 1 gi√¢y ƒë·ªÉ x·ª≠ l√Ω redirect
        } else {
          console.log("‚ÑπÔ∏è Kh√¥ng c√≥ redirect tr∆∞·ªõc ƒë√≥ c·∫ßn x·ª≠ l√Ω");
        }
      } catch (error: any) {
        console.error("‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω redirect:", error);
        localStorage.removeItem("auth_redirect_triggered");
        
        // Ghi l·∫°i l·ªói
        localStorage.setItem("auth_handler_error", JSON.stringify({
          time: Date.now(),
          message: error?.message || "Unknown error",
          stack: error?.stack || ""
        }));
      }
    };
    
    // X·ª≠ l√Ω k·∫øt qu·∫£ redirect ngay khi component mount
    handleRedirectResult();
    
    // X·ª≠ l√Ω tr·∫°ng th√°i x√°c th·ª±c
    const unsubscribe = onAuthStateChanged(auth, async (authUser) => {
      console.log("üîÑ Tr·∫°ng th√°i x√°c th·ª±c thay ƒë·ªïi:", authUser ? `ƒê√£ ƒëƒÉng nh·∫≠p (${authUser.displayName})` : "Ch∆∞a ƒëƒÉng nh·∫≠p");
      setLoading(true);
      
      if (authUser) {
        setUser(authUser);
        
        // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t Firestore
        try {
          const userDocRef = doc(db, "users", authUser.uid);
          const userDoc = await getDoc(userDocRef);
          
          if (!userDoc.exists()) {
            console.log("üÜï T·∫°o h·ªì s∆° ng∆∞·ªùi d√πng m·ªõi cho:", authUser.displayName);
            const inviteCode = nanoid(8).toUpperCase();
            await setDoc(userDocRef, {
              email: authUser.email,
              displayName: authUser.displayName,
              photoURL: authUser.photoURL,
              inviteCode,
              totalCoins: 0,
              miningRate: 0.1,
              permanentBuffMultiplier: 1,
              temporaryBuffMultiplier: 1,
              temporaryBuffExpiry: null,
              referralCount: 0,
              createdAt: serverTimestamp(),
              lastActive: serverTimestamp(),
            });
          } else {
            // C·∫≠p nh·∫≠t timestamp ho·∫°t ƒë·ªông g·∫ßn nh·∫•t
            await setDoc(userDocRef, {
              lastActive: serverTimestamp(),
            }, { merge: true });
          }
        } catch (err: any) {
          console.error("‚ùå L·ªói khi t∆∞∆°ng t√°c v·ªõi Firestore:", err);
        }
        
        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn dashboard n·∫øu ƒëang ·ªü trang login
        const isLoginPage = window.location.pathname === "/";
        if (isLoginPage && !redirectTriggered) {
          redirectTriggered = true;
          console.log("üîÑ Chuy·ªÉn h∆∞·ªõng ƒë·∫øn dashboard sau khi ph√°t hi·ªán ƒëƒÉng nh·∫≠p");
          setTimeout(() => {
            navigate("/dashboard");
          }, 100);
        }
      } else {
        console.log("‚ûñ Kh√¥ng c√≥ ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p");
        setUser(null);
        
        // X√≥a th√¥ng tin ƒëƒÉng nh·∫≠p ƒë√£ l∆∞u
        localStorage.removeItem("auth_user_email");
        localStorage.removeItem("auth_user_name");
        localStorage.removeItem("auth_user_uid");
        localStorage.removeItem("auth_completed");
      }
      
      setLoading(false);
    });
    
    // Cleanup khi component unmount
    return () => {
      console.log("üßπ D·ªçn d·∫πp Auth Provider");
      unsubscribe();
      sessionStorage.removeItem("auth_in_progress");
    };
  }, [navigate]);

  // PH∆Ø∆†NG PH√ÅP ƒêƒÇNG NH·∫¨P 3.0: S·ª¨ D·ª§NG IFRAME POPUP CHO ANDROID
  const signInWithGoogle = async () => {
    try {
      console.log("=== B·∫ÆT ƒê·∫¶U QU√Å TR√åNH ƒêƒÇNG NH·∫¨P M·ªöI (v3) ===");
      console.log("User Agent:", navigator.userAgent);
      
      // L√†m s·∫°ch c√°c tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥
      sessionStorage.removeItem("auth_in_progress");
      localStorage.removeItem("auth_redirect_triggered");
      
      // Ph√°t hi·ªán m√¥i tr∆∞·ªùng
      const isAndroid = /Android/i.test(navigator.userAgent);
      const isWebView = /wv|WebView|PTCWV/.test(navigator.userAgent);
      const isAndroidWebView = isAndroid && isWebView;
      const isChromeOnAndroid = isAndroid && /Chrome/.test(navigator.userAgent) && !isWebView;
      
      console.log("üîç Ph√°t hi·ªán m√¥i tr∆∞·ªùng:", { 
        isAndroid, 
        isWebView, 
        isAndroidWebView,
        isChromeOnAndroid
      });
      
      // C√†i ƒë·∫∑t bi·∫øn c·ªù ƒë·ªÉ t·∫°o ƒëi·ªÉm ki·ªÉm tra
      const loginTimestamp = Date.now().toString();
      localStorage.setItem("auth_login_timestamp", loginTimestamp);
      
      // C·∫•u h√¨nh Google provider t·ªëi ∆∞u cho m√¥i tr∆∞·ªùng
      googleProvider.addScope('profile');
      googleProvider.addScope('email');
      googleProvider.setCustomParameters({
        prompt: 'select_account',
        login_hint: `user_${loginTimestamp}@gmail.com`, // Tr√°nh cache
        access_type: 'offline',
        include_granted_scopes: 'true'
      });
      
      // ƒê·∫∂C BI·ªÜT: X·ª≠ l√Ω WebView Android
      if (isAndroidWebView) {
        console.log("üî¥ ƒê·∫∂C BI·ªÜT: PH√ÅT HI·ªÜN ANDROID WEBVIEW - S·ª¨ D·ª§NG PH∆Ø∆†NG PH√ÅP CUSTOM");
        sessionStorage.setItem("auth_in_progress", "true");
        localStorage.setItem("auth_webview_mode", "true");
        
        // 1. L∆∞u custom token ƒë·ªÉ nh·∫≠n di·ªán qu√° tr√¨nh n√†y
        const tokenIdentifier = `login_${Date.now()}`;
        localStorage.setItem("auth_token_id", tokenIdentifier);
        
        // 2. S·ª≠ d·ª•ng signInWithRedirect KH√îNG s·ª≠ d·ª•ng popup trong WebView
        console.log("‚è© WebView: S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p REDIRECT ƒë·∫∑c bi·ªát");
        localStorage.setItem("auth_redirect_triggered", "true");
        
        // D√πng timeout ƒë·ªÉ ƒë·∫£m b·∫£o localStorage ƒë∆∞·ª£c l∆∞u
        setTimeout(async () => {
          try {
            await signInWithRedirect(auth, googleProvider);
          } catch (err: any) {
            console.error("‚ùå WebView Redirect l·ªói:", err);
            
            // X·ª≠ l√Ω l·ªói trong WebView - tƒÉng c∆∞·ªùng k√Ω qu·ªπ th·ªùi gian
            localStorage.setItem("auth_webview_error", JSON.stringify({
              time: Date.now(),
              type: 'redirect_error',
              message: err?.message || 'Unknown error'
            }));
            
            // X√≥a c·ªù ƒë√°nh d·∫•u ƒë·ªÉ tr√°nh v√≤ng l·∫∑p
            localStorage.removeItem("auth_redirect_triggered");
          }
        }, 100);
      } 
      // X·ª≠ l√Ω Chrome tr√™n Android
      else if (isChromeOnAndroid) {
        console.log("üü† PH√ÅT HI·ªÜN CHROME TR√äN ANDROID - TH·ª∞C HI·ªÜN TH·ª¨ NGHI·ªÜM POPUP");
        sessionStorage.setItem("auth_in_progress", "true");
        
        try {
          // Th·ª≠ popup tr√™n Chrome Android
          console.log("‚è© Chrome Android: Th·ª≠ ph∆∞∆°ng ph√°p POPUP");
          const result = await signInWithPopup(auth, googleProvider);
          
          if (result && result.user) {
            console.log("‚úÖ Chrome Android: ƒêƒÉng nh·∫≠p v·ªõi Popup th√†nh c√¥ng!");
            sessionStorage.removeItem("auth_in_progress");
            
            // L∆∞u th√¥ng tin v√†o localStorage 
            localStorage.setItem("auth_user_email", result.user.email || "");
            localStorage.setItem("auth_user_name", result.user.displayName || "");
            localStorage.setItem("auth_user_uid", result.user.uid);
            localStorage.setItem("auth_completed", "true");
            
            // ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr∆∞·ªõc khi chuy·ªÉn trang
            setTimeout(() => {
              navigate("/dashboard");
            }, 300);
          }
        } catch (popupError: any) {
          console.error("‚ùå Chrome Android: L·ªói Popup:", popupError);
          console.log("‚è© Chrome Android: Th·ª≠ ph∆∞∆°ng ph√°p REDIRECT");
          
          // Ghi log v√† th·ª±c hi·ªán redirect 
          localStorage.setItem("auth_popup_error", JSON.stringify({
            time: Date.now(),
            message: popupError?.message || "Unknown popup error"
          }));
          localStorage.setItem("auth_redirect_triggered", "true");
          
          try {
            await signInWithRedirect(auth, googleProvider);
          } catch (redirectError) {
            console.error("‚ùå‚ùå Chrome Android: C·∫£ hai ph∆∞∆°ng ph√°p ƒë·ªÅu th·∫•t b·∫°i:", redirectError);
            localStorage.removeItem("auth_redirect_triggered");
          }
        }
      }
      // X·ª≠ l√Ω tr√¨nh duy·ªát desktop v√† c√°c tr∆∞·ªùng h·ª£p kh√°c
      else {
        console.log("üü¢ M√îI TR∆Ø·ªúNG DESKTOP/WEB TI√äU CHU·∫®N - S·ª¨ D·ª§NG REDIRECT");
        
        try {
          await signInWithRedirect(auth, googleProvider);
        } catch (err) {
          console.error("‚ùå L·ªói khi th·ª±c hi·ªán redirect:", err);
        }
      }
    } catch (error: any) {
      console.error("‚ùå‚ùå‚ùå L·ªñI NGHI√äM TR·ªåNG TRONG QU√Å TR√åNH ƒêƒÇNG NH·∫¨P:", error);
      
      // Ghi l·∫°i l·ªói ƒë·ªÉ ph√¢n t√≠ch
      localStorage.setItem("auth_critical_error", JSON.stringify({
        time: Date.now(),
        userAgent: navigator.userAgent,
        message: error?.message || 'Unknown error',
        code: error?.code || 'no_code'
      }));
      
      // X√≥a tr·∫°ng th√°i ƒëƒÉng nh·∫≠p khi c√≥ l·ªói
      sessionStorage.removeItem("auth_in_progress");
      localStorage.removeItem("auth_redirect_triggered");
    }
  };

  const logout = async () => {
    try {
      await signOut(auth);
      navigate("/");
    } catch (error) {
      console.error("Error signing out:", error);
    }
  };

  const value = {
    user,
    loading,
    signInWithGoogle,
    logout,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}
